<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PCA算法]]></title>
    <url>%2F2018%2F03%2F30%2Fpca%2F</url>
    <content type="text"><![CDATA[综述PCA算法，即主成分分析法（Principal Components Analysis, PCA），是常用的降维方法。总的来说，降维有以下优点，这些优点通常也是我们选择降维的原因。降维的优点如下： 避免维数灾难。当数据维度增加时，要维持相同程度的密采样所需要的样本数量会成指数级增长。比如，在[0, 1]区间内每隔0.01单位采样，仅需要100个采样点。而在三维空间中，如果将0.01小方格为采样间隔，则$10^6$个采样点。当维度更高时，采样点数量将极其庞大。 去除噪声。采样数据往往会带有噪声。以x、s、n分别表示采样数据、原始信号、噪声信号。通常可记其关系如下：$x = s + n$。由于PCA降维是保留方差最大的方向，而相对而言噪声信号n的方差要小于真实信号s的方差，因此关于噪声信号的相关信息会被滤除。 去除冗余。数据的各个维度可能并不完全独立，通过降维通过保留主要的维度从而去除冗余。PCA算法原理及推导从数据压缩的角度来看，我们希望压缩后的数据能够尽可能的保留更多的信息。以下为推导过程 样本数据集{$x_i$, i=1, 2, 3, …, m}，其中$x_i$为n维的列向量, 且已经去均均值化。${w_i, i=1, 2, 3, …, n}$表示特征空间的一组正交基, 其中$w_i$为n维列向量。令$W=[w_1, w_2, …, W_d]$表示由正交基中的d个基构成的矩阵，则W为$n*d$的矩阵。此时， $$z_i=W^Tx_i \tag {1}$$$$\hat{x_i}=Wz_i$$ (2)最小化信息损失，则有 $$min \sum_{i=1}^m {\left|\right|Wz_i-x_i\left|\right|}^2$$ (3)将上式分解开来，则有 $$min -\sum_{i=1}^m z_i^Tz_i$$ (4)此处分解忽视了只有$x_i$所引入的常量。由内积与矩阵的迹的对应关系$z_iz_i^T=tr(z_i^Tz_i)$，即可得 $$min -\sum_{i=1}^m tr(z_izi^T)$$ (5)$$min -\sum{i=1}^m tr(W^T(x_ix_i^T)W)$$(6)由于W由正交基构成，所以有 $$W^TW=I$$又$\sum_i^mx_ix_i^T=XX^T$，即有如下优化 $$min -tr(W^TXX^TW)$$ (7)$$W^TW=I$$ (8)由拉格朗日乘子法可得 $$XX^TW=\lambda W$$ (9) 从方差最大化的角度，即我们希望降维后的样本尽可能的分开，可以得到同样的结果。从以上的推导过程中可以很容易的得到PCA的算法实现过程。 对数据去均值化 求协方差矩阵$A=\sum_i^mx_ix_i^T=XX^T$ 对协方差矩阵A进行奇异值分解，选取特征值较大的d个特征值所对应的特征向量，即可得到W 由W可求出降维后的数据$Z=W^TX$ 核化PCA算法以上的PCA算法为线性的，有时我们需要引入非线性关系进行降维，这时，核技巧就派上用场了。下面我们来介绍核化PCA降维。 首先引入非线性关系$\phi$，由(9)式可得 $$XX^TW=(\sum_{i=1}^{m}\phi(x_i)\phi(x_i)^T)W=\lambda W$$(10)则有， $$W=\frac{1}{\lambda}(\sum_{i=1}^{m}\phi(x_i)\phi(xi)^T)W=\sum{i=1}^{m}\phi(x_i)\frac{\phi(x_i)^TW}{\lambda}$$ (11)记$\alpha_i=\frac{1}{\lambda}\phi(x_i)^TW$，则$\alpha_i$为d维行向量，则有 $$W=\sum_{i=1}^{m}\phi(x_i)\alpha_i$$ (12)核技巧往往是已知核化后的内积，而非知道核本身，即 $$\kappa(x_i, x_j)=\phi(x_i)^T\phi(x_j)=\phi(x_j)^T\phi(x_i)$$ (13)将式(12), (13)带入(10)式即可得到 $$\sum_{i=1}^m\phi(xi)(\sum{j=1}^m\kappa(x_i, x_j)\alpha_j-\lambda\alphai)=0$$ (14)令$K{ij}=\kappa(x_i, x_j)$，$A={\alpha_i;…;\alpha_m}$，则A为m*d的矩阵，有 $$KA=\lambda A $$ (15)将K进行奇异值分解即可得到${\alpha_i, i=1,2,…,m}$，下面来整理一下维度，$x_i$为n维列向量，则X为$nm$的矩阵，$\alpha_i$为d维行向量，则A为$md$的矩阵，K为$mm$的矩阵，则KA仍然为$md$的矩阵。令$z_i=W^T\phi(x_i)$, 则$z_i$为$d1$的向量。核化PCA将$n1$的向量降维为$d*1$的向量。则 $$z_j=W^T\phi(xj)=\sum{i=1}^{m}\alpha_i^T\phi(x_i)^Txj=\sum{i=1}^{m}\alpha_i^T\kappa(x_i, x_j)$$(16)将其向量化即可得到 $$Z=A^TK$$ (17) 以上即为KPCA算法的原理及推导，其算法流程如下： 对数据去均值化 求协方差矩阵$K$，$K_{ij}=\kappa(x_i, x_j)$ 对协方差矩阵K进行奇异值分解，选取特征值较大的d个特征值所对应的特征向量，即可得到A 由W可求出降维后的数据$Z=A^TK$ PCA及KPCA实现根据以上的算法过程，佐以numpy的函数库， 可以很轻易地实现PCA算法，其Python实现如下：12345678910111213141516171819202122232425262728293031323334def PCA(X, dim): ''' pca算法实现 :param X:X.shape = (m, n), n表示特征维度，m表示样本数量 :param dim:表示转换后的维度 :return:W(n*d), Z(m*d) W为转换矩阵，Z为转换后的数据 ''' # 均值化 X = np.array(X) - np.mean(X, 0) A = np.matmul(X.T, X) u, s, v = np.linalg.svd(A) W = v[:, 0:dim] Z = np.matmul(X, W) return W, Zdef KPCA(X, dim, kernel, sigma): ''' KPCA算法实现 :param X: X.shape = (m, n), n表示特征维度，m表示样本数量 :param dim: 表示转换后的特征维度 :param kernel: 核方法 :param sigma: 此处使用高斯核，因此直接显示表示出来了 :return: A(m*d), Z(m*d) A为转换矩阵，Z为转换后的数据 ''' X = np.array(X) - np.mean(X, 0) K = [[kernel(xi, xj, sigma) for xi in X] for xj in X] u, s, v = np.linalg.svd(K) A = v[:, 0:dim] Z = np.matmul(K, A) return A, Zdef gaussian(xi, xj,sigma): return 1./sigma/np.sqrt(2*np.pi)*np.exp(-np.sum(np.square(np.subtract(xi, xj)))/sigma**2) 参考文献主要参考文献为周志华老师的《机器学习》西瓜书]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>降维算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zsh、tmux和vim插件的配置和使用]]></title>
    <url>%2F2017%2F12%2F18%2Fzsh-vim-tmux-config%2F</url>
    <content type="text"><![CDATA[综述本文主要介绍了配置zsh，安装配置vim插件，以及安装tmux等。本文主要参考了以下链接： oh-my-zsh powerlevel9k awesome-terminal-fonts Powerline Fonts tmux vundle vim插件库 安装配置zsh安装zshDebian系可以直接通过以下命令安装zsh:1sudo apt-get install zsh 此时，执行以下命令123# cat /etc/shells # 查看所有shellecho $SHELL # 查看默认shell# chsh -c $(which zsh) # 修改默认shell 通过查看默认shell,发现没什么变化，别急，这才刚刚开始。网上有大神写了配置zsh的脚本文件，为大多数人所采纳，不必担心shell中注入恶意代码，安装方式如下：1sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)" 安装完之后，重启所有终端即可进入zsh。 配置zsh安装powerlevel9k在终端下输入以下命令1git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k 即安装完毕 安装awesome-terminal-fonts在终端下执行以下命令1git clone https://github.com/gabrielelana/awesome-terminal-fonts.git 将fonts clone到本地，然后执行以下命令，将awesome-terminal-fonts/build目录下的文件拷贝到~/.fonts目录下，如果没有~/.fonts目录则创建一个。命令如下：123456cd awesome-terminal-fontscp ./build/* ~/.fonts/*fc-cache -fv ~/.fontscp ./config/10-symbols.conf ~/.config/fontconfig/conf.d# 若~/.config/fontconfig/conf.d不存在，则按照如下命令创建# mkdir ~/.config/fontconfig/conf.d -p 执行完上述命令后，打开.zshrc文件，在其中加入以下内容：1source ~/.fonts/*.sh 配置zsh打开.zshrc，在其中添加或修改以下内容，注意POWERLEVEL9K_MODE=’awesome-fontconfig’需放置在ZSH_THEME=”powerlevel9k/powerlevel9k”之前。12345678910 6 export TERM=&quot;xterm-256color&quot; 7 # Set name of the theme to load. Optionally, if you set this to &quot;random&quot; 8 # it&apos;ll load a random theme each time that oh-my-zsh is loaded. 9 # See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes10 # ZSH_THEME=&quot;robbyrussell&quot;11 POWERLEVEL9K_MODE=&apos;awesome-fontconfig&apos;12 ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;13 POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon dir vcs)14 POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status custom_git_stats time)17 POWERLEVEL9K_OS_ICON_FOREGROUND=&quot;blue&quot; 13-17行定义了zsh的prompt的样式，保存并退出，并在终端下执行source ~/.zshrc即可看到酷炫的zsh样式。如果有出现乱码，可先确定awesome-terminal-fonts是否安装出错，若已确认正确安装，仍出现乱码，可按照链接4安装Powerline fonts。并将POWERLEVEL9K_MODE=’awesome-fontconfig’注释掉。 配置vim安装vundle在终端下执行以下命令：1git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim 即可安装vundle. 安装插件打开.vimrc，如果没有则新建，在其中添加以下内容：12345678910111213141516171819202122232425262728293031323334353637383940414243444546 1 set nocompatible 2 set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936 3 set termencoding=utf-8 4 set encoding=utf-8 5 set nu 6 &quot; 设置默认进行大小写不敏感查找 7 set ignorecase 8 &quot; 如果有一个大写字母，则切换到大小写敏感查找 9 set smartcase10 &quot; vundle 环境设置11 filetype off12 set rtp+=~/.vim/bundle/Vundle.vim13 &quot; vundle 管理的插件列表必须位于 vundle#begin() 和 vundle#end() 之间14 call vundle#begin()15 Plugin &apos;VundleVim/Vundle.vim&apos;16 Plugin &apos;scrooloose/nerdtree&apos; &quot; file/directory treee17 Plugin &apos;scrooloose/nerdcommenter&apos; &quot; code commenter18 Plugin &apos;kien/ctrlp.vim&apos; &quot; Fuzzy file, buffer, mru, tag, etc finder19 Plugin &apos;altercation/vim-colors-solarized&apos;20 Plugin &apos;tomasr/molokai&apos;21 Plugin &apos;jacoborus/tender&apos;22 Plugin &apos;Shougo/vimproc.vim&apos;23 &quot; 插件列表结束24 call vundle#end()25 filetype plugin indent on26 &quot; 配置 nerdtree27 autocmd vimenter * NERDTree # 添加此行即可使用nerdtree28 map &lt;C-n&gt; :NERDTreeToggle&lt;CR&gt; # 将打开nerdtree的快捷键定义为ctrl+n29 &quot; 配置 ctrlp30 let g:ctrlp_map = &apos;&lt;c-p&gt;&apos; # 定义ctrlp快捷键为 ctrl + p31 let g:ctrlp_cmd = &apos;CtrlP&apos; # 定义ctrlp命令为CtrlP32 let g:ctrlp_working_path_mode = &apos;ra&apos; # 定义ctrlp搜索模式为ra33 &quot; 配置 nerdcommenter34 let g:NERDSpaceDelims = 1 # 定义nerdcommenter默认在注释符号后面加一空格35 &quot; 配置 vim-colors-solarized36 &quot; syntax enable 37 &quot; set background=dark38 &quot; colorscheme solarized39 &quot; 配置 molokai40 &quot; let g:molokai\_original = 141 &quot; let g:rehash256 = 142 &quot; 配置 tender 43 syntax enable # 打开符号高亮44 colorscheme tender # 定义配色方案45 &quot; colorscheme molokai46 &quot; colorscheme solarized 10–25行定义了vundle的设置，vim插件需置于 vundle#begin() 和 vundle#end() 之间。27–28行定义了nerdtree的配置，可参照每行后的注释符号了解其意义。30–32定义ctrlp的配置。nerdcommenter和scheme的设置也如上所示。另外，[vim插件库]https://vimawesome.com/包含了大量的插件，及其安装和配置方法。 相关插件使用方法nerdtree 插件使用方法nerdtree 快捷键如下所示：123456789101112131415161718192021222324252627282930313233343536373839404142434445ctrl + w + h 光标 focus 左侧树形目录ctrl + w + l 光标 focus 右侧文件显示窗口ctrl + w + w 光标自动在左右侧窗口切换ctrl + w + r 移动当前窗口的布局位置o 展开当前所在目录O 递归的展开当前所在目录下的所有目录x 合拢选中结点的父目录X 递归 合拢选中结点下的所有目录i (水平地)split 一个新窗口打开选中文件，并跳到该窗口gi split 一个新窗口打开选中文件，但不跳到该窗口s (竖直地)vsplit 一个新窗口打开选中文件，并跳到该窗口gs vsplit 一个新 窗口打开选中文件，但不跳到该窗口 P 跳到根结点p 跳到父结点K 跳到当前目录下同级的第一个结点J 跳到当前目录下同级的最后一个结点k 跳到当前目录下同级的前一个结点j 跳到当前目录下同级的后一个结点C 将选中目录或选中文件的父目录设为根结点u 将当前根结点的父目录设为根目录，并变成合拢原根结点U 将当前根结点的父目录设为根目录，但保持展开原根结点m 显示文件系统菜单，然后根据提示进行文件的操作如新建，重命名等q 关闭 NerdTree 窗口? 切换是否显示 Quick Helpe Edit the current difI 切换是否显示隐藏文件f 切换是否使用文件过滤器F 切换是否显示文件B 切换是否显示书签:tabnew [++opt选项] ［＋cmd］ 文件 建立对指定文件新的tab:tabc 关闭当前的 tab:tabo 关闭所有其他的 tab:tabs 查看所有打开的 tab:tabp 前一个 tab:tabn 后一个 tabgT 前一个 tabgt 后一个 tab 上面指令的前后顺序大致可以反映命令的使用频率从高到低的顺序。 ctrlp 使用方法ctrl + p 快捷键，在vim命令模式下，可以进行模糊查找，直接输入关键字即可查找，在插入模式下，ctrl + p 快捷键可以自动补全。 nerdcommenter 使用方法nerdcommenter 快捷键默认前缀为\，常用快捷键为12\cc 对当前行进行注释 \cu 对当前行去注释 配合vim ctrl + v在可视模式下，光标移动选择多行，可以进行多行的注释和去注释。 tmux安装及使用安装tmuxdebian系可直接使用apt-get进行安装，由于apt-get的版本相对较老，本文此案去了手动编译的方式，由于tmux依赖于libevent 2.x和ncurses，因此需要先编译安装以上两个依赖。分别在http://libevent.org和http://libevent.org下载压缩包，加压分别命名为libevent、ncurses，进入libevent，执行以下命令：12345cd libevent./autogen.sh./configuremakesudo make install 进入ncurses执行以下命令：12345cd ncursesexport CPPFLAGS=&quot;-P&quot; # 如果不配置这个选项，会报错./configuremakesudo make install 安装完成后，执行以下命令，12345git clone https://github.com/tmux/tmux.gitcd tmuxsh autogen.sh./configure &amp;&amp; makesudo make install 此时运行tmux，可能会报/usr/local/lib/libevent-2.1.so.6 cannot open shared object file: No such file or directory的错误，这是因为libevent安装在了/usr/local/lib中，而非/usr/lib中，此时可以执行下命令1sudo ln -s /usr/local/lib/libevent-2.1.so.6 /usr/lib/libevent-2.1.so.6 或者也可以直接拷贝进去1sudo cp /usr/local/lib/libevent-2.1.so.6 /usr/lib/ 至此，tmux已经安装完毕 配置tmux在终端下打开~/.tmux.conf，如果没有则新建，在其中添加以下内容：123456789101112131415161718192021222324252627282930313233# 基本设置 1 set -g default-terminal &quot;screen-256color&quot; 3 set -g display-time 3000 4 set -g escape-time 0 5 set -g history-limit 65535 6 set -g base-index 1 7 set -g pane-base-index 1 8 # 9 # # 前缀绑定 (Ctrl+a) 10 set -g prefix ^a 11 unbind ^b 12 bind a send-prefix 13 # 14 # # 分割窗口 15 unbind &apos;&quot;&apos; 16 bind - splitw -v 17 unbind % 18 bind | splitw -h 19 # 20 # # 选中窗口 21 bind-key k select-pane -U 22 bind-key j select-pane -D 23 bind-key h select-pane -L 24 bind-key l select-pane -R 25 # 26 # # copy-mode 将快捷键设置为 vi 模式 27 setw -g mode-keys vi 28 # 29 # # 启用鼠标(Tmux v2.1) 30 set -g mouse on 31 # 32 # # 更新配置文件 33 bind r source-file ~/.tmux.conf \; display &quot;已更新&quot; 以上设置主要将tmux的前缀改为Ctrl+a，并设置-和|来进行横向和竖向分屏，比较直观 使用tmux在tmux外，或者说shell中，tmux有以下命令12345tmux [new -s 会话名 -n 窗口名] # 启动新会话 tmux at [-t 会话名] # 恢复会话tmux ls # 列出所有huihuatmux kill-session -t 会话名 # 关闭会话tmux kill-server # 关闭所有会话和窗口 在tmux内部，按下前缀ctrl + a(在conf中定义的前缀，默认为ctrl + b)，有以下快捷键和命令：1234567891011121314151617181920212223242526&quot;&quot; 会话:new&lt;回车&gt; 启动新会话s 列出所有会话$ 重命名当前会话&quot;&quot; 窗口c 创建新窗口w 列出所有窗口n 后一个窗口p 前一个窗口f 查找窗口, 重命名当前窗口&amp; 关闭当前窗口&quot;&quot; 窗格(分割窗口)| 垂直分割\- 水平分割o 交换窗格x 关闭窗格⍽ 左边这个符号代表空格键 - 切换布局q 显示每个窗格是第几个，当数字出现的时候按数字几就选中第几个窗格&#123; 与上一个窗格交换位置&#125; 与下一个窗格交换位置z 切换窗格最大化/最小化 ← 左移窗格→ 右移窗格↑ 上移窗格↓ 下移窗格 我经常使用的快捷键多为ctrl + a，然后[1 - 9] 切换窗口，| -分割窗格，↑ ↓ ← → 移动窗格，c 创建窗口，&amp; 关闭窗口等。更多命令，可以参考链接http://wdxtub.com/2016/03/30/tmux-guide/。]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>zsh</tag>
        <tag>vim</tag>
        <tag>tmux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用hexo和github搭建自己的博客]]></title>
    <url>%2F2017%2F12%2F17%2Fhexo-github-pages%2F</url>
    <content type="text"><![CDATA[综述本文主要介绍如何利用github以及hexo搭建自己的博客，本文主要参考了以下链接： next 官网–主题配置 next 官网–第三方服务 hexo 官网 nodejs 官网 https://github.com/isLishude/blog/issues/62 安装Nodejs和hexo由于我使用的是ubuntu 16.04，debian系的系统可以采用如下方式安装：12wget -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -sudo apt-get install -y nodejs 然后，将npm的源换成淘宝的源：1npm config set registry https://registry.npm.taobao.org hexo的安装方式如下：1npm install hexo-cli -g 创建并部署到github pages首先创建一个github repository, 默认即可，名字可命名为xxx.github.io，名字可以根据自己的心意变更，不拘泥于形式。然后，在家目录(根据自己的习惯)下，执行以下命令：1234mkdir xxx.github.iocd xxx.github.iohexo initnpm install 这样就可以初始化完毕了你的博客文件夹，此时可以执行以下命令：1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 在浏览器中输入 http://localhost:4000/ 即可看到你的博客页面。那么，如何部署到github上呢？首先，需要在wxx.github.io文件夹下执行以下命令：1npm install hexo-deployer-git --save 请确保你的电脑上安装有git，如果没有，debian系下可执行以下命令：1sudo apt-get install git 之后，在xxx.github.io文件下打开_config.yml，进行如下配置:1234567891011121314 5 # site 6 title: your blog title # 你的网页title 7 subtitle: 8 description: your description # 你的描述 9 author: your name # 你的名字或者昵称 10 language: zh-Hans # 你的语言设置 11 timezone: Asia/Shanghai # 你的时区设置...... 77 # Deployment 78 ## Docs: https://hexo.io/docs/deployment.html 79 deploy: 80 type: git 81 repository: https://github.com/xxx/xxx.github.io.git 82 bracnch: master 将your xxx 设置成whatever you want， 然后deploy下面的type设置成git, 将repository设置成在刚才github上新建的repository，branch设置成master。然后在xxx.github.io目录下执行1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 在浏览器中输入 xxx.github.io，即可访问你的网站。 更换hexo主题安装next主题链接https://hexo.io/themes/列出了hexo的一些主题，你可在上面寻找自己喜欢的主题，然后更换。本文选择了应用较广的主题next，以下是其配置方法。在此之前，需要先明确两个文件，一个称之为主题配置文件，另一个称之为站点配置文件。以下xxx.github.io的文件结构：12345678910xxx.github.io├── _config.yml├── db.json├── node_modules├── package.json├── package-lock.json├── public├── scaffolds├── source└── themes 在xxx.github.io下的_config.yml称之为站点配置文件，在themes/next/文件夹下的_config.yml称之为主题配置文件夹。不用纠结自己的themes文件夹下没有next，我们现在就开始安装。打开终端，执行以下命令：12cd xxx.github.iogit clone https://github.com/iissnan/hexo-theme-next themes/next 同样也可以https://github.com/iissnan/hexo-theme-next下载zip文件，然后将其解压到themes文件夹下，并将其重命名为next。接着对站点配置文件，作如下配置：175 theme: next 此时在xxx.github.io目录下运行以下命令1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 即可在浏览器下看到next主题的页面 next主题设置选择scheme在主题配置文件，即themes/next/_config.yml中，将Scheme进行如下设置：1108 scheme: Pisces 设置菜单在主题配置文件中，将menu进行如下设置：123456menu: home: / || home # about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive 此时还需在xxx.github.io文件夹下执行以下命令：12hexo new page tagshexo new page categories 并在xxx.github.io/source/categories下的index.md中添加以下信息：12type: &quot;categoriescomments: false 同理，在xxx.github.io/source/tags下的index.md中添加以下信息：12type: &quot;tags&quot;comments: false 设置comments为false是为了让以后添加的评论功能在这两个page下不显示。 配置头像及站点标志在主题配置文件中，修改字段avatar如下所示：1avatar: /path/to/your/avatar 将/path/to/your/avatar设置成你的图片所在的路径，如我在xxx.github.io/source/下新建了images文件夹，并将我的图片放在其中，路径设置为/images/avatar.jpg，注意不要加source。同样在主题配置文件中，设置favicon字段如下所示：12345favicon: small: /images/avatar.jpg medium: /images/avatar.jpg apple_touch_icon: /images/avatar.jpg safari_pinned_tab: /images/avatar.jpg 集成第三方服务关于更多主题配置和第三方服务设置，请参考链接[next主题配置]http://theme-next.iissnan.com/theme-settings.html以及[next第三方服务集成]http://theme-next.iissnan.com/third-party-services.html]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[install caffe on ubuntu16.04]]></title>
    <url>%2F2017%2F12%2F17%2Fcaffe-cpu-only-with-ubuntu1604-md%2F</url>
    <content type="text"><![CDATA[综述本文主要介绍在ubuntu 16.04 系统上编译安装caffe，请注意这里是CPU ONLY版本，至于为什么是cpu only，我也很无奈这台台式机不带GPU。本文主要参考了以下链接： https://github.com/BVLC/caffe/wiki/Ubuntu-16.04-or-15.10-Installation-Guide https://docs.opencv.org/3.2.0/d7/d9f/tutorial_linux_install.html http://www.linuxidc.com/Linux/2016-12/138870.htm和http://www.linuxidc.com/Linux/2016-12/138870p2.htm 安装依赖12345678910sudo apt-get updatesudo apt-get upgradesudo apt-get install -y build-essential cmake git pkg-configsudo apt-get install -y libprotobuf-dev libleveldb-dev libsnappy-dev \libhdf5-serial-dev protobuf-compilersudo apt-get install -y libopenblas-dev liblapack-dev libatlas-base-devsudo apt-get install -y --no-install-recommends libboost-all-devsudo apt-get install -y libgflags-dev libgoogle-glog-dev liblmdb-devsudo apt-get install -y python3-dev #已有可不必安装sudo apt-get install -y python3-numpy python3-scipy 其中 -y 选项可以省略 安装opencv 3.2.0安装依赖123456[compiler] sudo apt-get install build-essential[required] sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev \libavformat-dev libswscale-devsudo apt-get install liblapacke-dev checkinstall #1[optional] sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev \libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev 其中，compiler和required必选，optional可选，注释#1的行需要安装，不然会引发一个错误，这个错误是fatal error: LAPACKE_H_PATH-NOTFOUND/lapacke.h: No such file or directory#include “LAPACKE_H_PATH-NOTFOUND/lapacke.h”这个错误很奇葩，产生这个错误感觉是脚本的锅，如果使用了sudo apt-get install liblapacke-dev checkinstall还出现这个错误，那么就手动找到报错的文件，将#include “LAPACKE_H_PATH-NOTFOUND/lapacke.h”修改为#include “lapacke.h” 下载opencv3.2.0源码可以使用git下载123cd ~/&lt;my_working_directory&gt;git clone https://github.com/opencv/opencv.gitgit clone https://github.com/opencv/opencv_contrib.git 也可以下载zip文件解压，解压后，为方便起见，将opencv-3.2.0,重命名为opencv，将opencv_contrib重命名为contrib,并将其拷贝至opencv目录下 编译源码首先创建build目录123cd opencvmkdir buildcd build 然后编译源码12345678sudo cmake -DCMAKE_BUILD_TYPE=Release \-DCMAKE_INSTALL_PREFIX=/usr/local \-DPYTHON3_EXECUTABLE=/usr/bin/python3 \-DPYTHON_INCLUDE_DIR=/usr/include/python3.5 \-DPYTHON_INCLUDE_DIR2=/usr/include/x86_64-linux-gnu/python3.5m \-DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.5m.so \-DPYTHON3_NUMPY_INCLUDE_DIRS=/usr/lib/python3/dist-packages/numpy/core/include/ \-DOPENCV_EXTRA_MODULES_PATH=/home/dsk/dsk/opencv/contrib/modules .. 注意，将python3或者3.5设置成你自己的python版本，注意，-Dkey=value形式key和value之间不要有空格，否则会提示-DOPENCV_EXTRA_MODULES_PATH解析错误，由于这个空格浪费了我不少时间如果遇到要下载文件，可能由于墙的原因，而下载失败，可以手动下载然后将文件拷贝至此文件夹下opencv/contrib/modules/dnn/.download/bd5e3eed635a8d32e2b99658633815ef/v3.1.0，可以使用命令行拷贝以上cmake设置成功之后，开始编译12sudo make -j4sudo make install 注意 make -j4是指用4个线程同时运行。可先用nproc查看可用的处理器数目 安装caffe下载源码并设置相关文件下载caffe 源码，解压，进入caffe文件夹，将Makefile.config.example拷贝为Makefile.config123cd caffe-mastercp Makefile.config.example Makefile.configsudo gedit Makefile.config 在gedit上将以下内容修改，将以下行的注释去掉USE_CUDNN := 0OPENCV_VERSION := 3由于我使用python 3，所以将python2全部注释掉，将python3的注释去掉 而且，将 # Whatever else you find you need goes here. 下面的12INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/includeLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib 分别修改为：123INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serialLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu \/usr/lib/x86_64-linux-gnu/hdf5/serial 主要是因为ubuntu16.04文件位置 与以前版本相比，发生了变化，而系统需要hdf5的位置，因此需要修改路径.最后，打开makefile文件，做如下修改，将1NVCCFLAGS +=-ccbin=$(CXX) -Xcompiler-fPIC $(COMMON_FLAGS) 替换为：1NVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS) 编译源码最后，使用以下命令编译源码12345make all -j4make test -j4make runtest -j4make pycaffe -j4make distribute -j4 如果以上没有报错，那么恭喜你，如果出现以下错误，可以进行如此修改： not found lboost_python3 解决方法，修改Makefile.config文件，将123PYTHON_LIBRARIES := boost_python3 python3.5mPYTHON_INCLUDE := /usr/include/python3.5m \ /usr/lib/python3.5/dist-packages/numpy/core/include 修改为123PYTHON_LIBRARIES := boost_python-py35 python3.5mPYTHON_INCLUDE := /usr/include/python3.5m \ /usr/lib/python3.5/dist-packages/numpy/core/include not found libopencv_core.so.3.2.0 这个为ld_library的问题，解决方法为：1sudo vi /etc/ld.so.conf.d/opencv.conf 添加以下内容1/usr/local/lib /usr/local/lib为我的ibopencv_core.so.3.2.0所在的文件夹，你需要修改为你的相应文件夹]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>python3</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
</search>
