<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo-github-pages]]></title>
    <url>%2F2017%2F12%2F17%2Fhexo-github-pages%2F</url>
    <content type="text"><![CDATA[综述本文主要介绍如何利用github以及hexo搭建自己的博客，本文主要参考了以下链接： [next 官网–主题配置]http://theme-next.iissnan.com/theme-settings.html [next 官网–第三方服务]http://theme-next.iissnan.com/theme-settings.html [hexo 官网]https://hexo.io/ [nodejs 官网]https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions https://github.com/isLishude/blog/issues/62 安装Nodejs和hexo由于我使用的是ubuntu 16.04，debian系的系统可以采用如下方式安装：12wget -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -sudo apt-get install -y nodejs 然后，将npm的源换成淘宝的源：1npm config set registry https://registry.npm.taobao.org hexo的安装方式如下：1npm install hexo-cli -g 创建并部署到github pages首先创建一个github repository, 默认即可，名字可命名为xxx.github.io，名字可以根据自己的心意变更，不拘泥于形式。然后，在家目录(根据自己的习惯)下，执行以下命令：1234mkdir xxx.github.iocd xxx.github.iohexo initnpm install 这样就可以初始化完毕了你的博客文件夹，此时可以执行以下命令：1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 在浏览器中输入 http://localhost:4000/ 即可看到你的博客页面。那么，如何部署到github上呢？首先，需要在wxx.github.io文件夹下执行以下命令：1npm install hexo-deployer-git --save 请确保你的电脑上安装有git，如果没有，debian系下可执行以下命令：1sudo apt-get install git 之后，在xxx.github.io文件下打开_config.yml，进行如下配置:1234567891011121314 5 # site 6 title: your blog title # 你的网页title 7 subtitle: 8 description: your description # 你的描述 9 author: your name # 你的名字或者昵称 10 language: zh-Hans # 你的语言设置 11 timezone: Asia/Shanghai # 你的时区设置...... 77 # Deployment 78 ## Docs: https://hexo.io/docs/deployment.html 79 deploy: 80 type: git 81 repository: https://github.com/xxx/xxx.github.io.git 82 bracnch: master 将your xxx 设置成whatever you want， 然后deploy下面的type设置成git, 将repository设置成在刚才github上新建的repository，branch设置成master。然后在xxx.github.io目录下执行1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 在浏览器中输入 xxx.github.io，即可访问你的网站。 更换hexo主题安装next主题链接https://hexo.io/themes/列出了hexo的一些主题，你可在上面寻找自己喜欢的主题，然后更换。本文选择了应用较广的主题next，以下是其配置方法。在此之前，需要先明确两个文件，一个称之为主题配置文件，另一个称之为站点配置文件。以下为xxx.github.io的文件结构：xxx.github.io├── _config.yml├── db.json├── node_modules├── package.json├── package-lock.json├── public├── scaffolds├── source└── themes在xxx.github.io下的_config.yml称之为站点配置文件，在themes/next/文件夹下的_config.yml称之为主题配置文件夹。不用纠结自己的themes文件夹下没有next，我们现在就开始安装。打开终端，执行以下命令：12cd xxx.github.iogit clone https://github.com/iissnan/hexo-theme-next themes/next 同样也可以https://github.com/iissnan/hexo-theme-next下载zip文件，然后将其解压到themes文件夹下，并将其重命名为next。接着对站点配置文件，作如下配置：175 theme: next 此时在xxx.github.io目录下运行以下命令1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 即可在浏览器下看到next主题的页面 next主题设置选择scheme在主题配置文件，即themes/next/_config.yml中，将Scheme进行如下设置：1108 scheme: Pisces 设置菜单在主题配置文件中，将menu进行如下设置：123456menu: home: / || home # about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive 此时还需在xxx.github.io文件夹下执行以下命令：12hexo new page tagshexo new page categories 并在xxx.github.io/source/categories下的index.md中添加以下信息：12type: &quot;categoriescomments: false 同理，在xxx.github.io/source/tags下的index.md中添加以下信息：12type: &quot;tags&quot;comments: false 设置comments为false是为了让以后添加的评论功能在这两个page下不显示。 配置头像及站点标志在主题配置文件中，修改字段avatar如下所示：1avatar: /path/to/your/avatar 将/path/to/your/avatar设置成你的图片所在的路径，如我在xxx.github.io/source/下新建了images文件夹，并将我的图片放在其中，路径设置为/images/avatar.jpg，注意不要加source。同样在主题配置文件中，设置favicon字段如下所示：12345favicon: small: /images/avatar.jpg medium: /images/avatar.jpg apple_touch_icon: /images/avatar.jpg safari_pinned_tab: /images/avatar.jpg 集成第三方服务关于更多主题配置和第三方服务设置，请参考链接[next主题配置]http://theme-next.iissnan.com/theme-settings.html以及[next第三方服务集成]http://theme-next.iissnan.com/third-party-services.html]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[install caffe on ubuntu16.04]]></title>
    <url>%2F2017%2F12%2F17%2Fcaffe-cpu-only-with-ubuntu1604-md%2F</url>
    <content type="text"><![CDATA[综述本文主要介绍在ubuntu 16.04 系统上编译安装caffe，请注意这里是CPU ONLY版本，至于为什么是cpu only，我也很无奈这台台式机不带GPU。本文主要参考了以下链接： 1.https://github.com/BVLC/caffe/wiki/Ubuntu-16.04-or-15.10-Installation-Guide 2.https://docs.opencv.org/3.2.0/d7/d9f/tutorial_linux_install.html 3.http://www.linuxidc.com/Linux/2016-12/138870.htm和 http://www.linuxidc.com/Linux/2016-12/138870p2.htm 安装依赖12345678910sudo apt-get updatesudo apt-get upgradesudo apt-get install -y build-essential cmake git pkg-configsudo apt-get install -y libprotobuf-dev libleveldb-dev libsnappy-dev \libhdf5-serial-dev protobuf-compilersudo apt-get install -y libopenblas-dev liblapack-dev libatlas-base-devsudo apt-get install -y --no-install-recommends libboost-all-devsudo apt-get install -y libgflags-dev libgoogle-glog-dev liblmdb-devsudo apt-get install -y python3-dev #已有可不必安装sudo apt-get install -y python3-numpy python3-scipy 其中 -y 选项可以省略 安装opencv 3.2.0安装依赖123456[compiler] sudo apt-get install build-essential[required] sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev \libavformat-dev libswscale-devsudo apt-get install liblapacke-dev checkinstall #1[optional] sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev \libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev 其中，compiler和required必选，optional可选，注释#1的行需要安装，不然会引发一个错误，这个错误是fatal error: LAPACKE_H_PATH-NOTFOUND/lapacke.h: No such file or directory#include “LAPACKE_H_PATH-NOTFOUND/lapacke.h”这个错误很奇葩，产生这个错误感觉是脚本的锅，如果使用了sudo apt-get install liblapacke-dev checkinstall还出现这个错误，那么就手动找到报错的文件，将#include “LAPACKE_H_PATH-NOTFOUND/lapacke.h”修改为#include “lapacke.h” 下载opencv3.2.0源码可以使用git下载123cd ~/&lt;my_working_directory&gt;git clone https://github.com/opencv/opencv.gitgit clone https://github.com/opencv/opencv_contrib.git 也可以下载zip文件解压，解压后，为方便起见，将opencv-3.2.0,重命名为opencv，将opencv_contrib重命名为contrib,并将其拷贝至opencv目录下 编译源码首先创建build目录123cd opencvmkdir buildcd build 然后编译源码12345678sudo cmake -DCMAKE_BUILD_TYPE=Release \-DCMAKE_INSTALL_PREFIX=/usr/local \-DPYTHON3_EXECUTABLE=/usr/bin/python3 \-DPYTHON_INCLUDE_DIR=/usr/include/python3.5 \-DPYTHON_INCLUDE_DIR2=/usr/include/x86_64-linux-gnu/python3.5m \-DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.5m.so \-DPYTHON3_NUMPY_INCLUDE_DIRS=/usr/lib/python3/dist-packages/numpy/core/include/ \-DOPENCV_EXTRA_MODULES_PATH=/home/dsk/dsk/opencv/contrib/modules .. 注意，将python3或者3.5设置成你自己的python版本，注意，-Dkey=value形式key和value之间不要有空格，否则会提示-DOPENCV_EXTRA_MODULES_PATH解析错误，由于这个空格浪费了我不少时间如果遇到要下载文件，可能由于墙的原因，而下载失败，可以手动下载然后将文件拷贝至此文件夹下opencv/contrib/modules/dnn/.download/bd5e3eed635a8d32e2b99658633815ef/v3.1.0，可以使用命令行拷贝以上cmake设置成功之后，开始编译12sudo make -j4sudo make install 注意 make -j4是指用4个线程同时运行。可先用nproc查看可用的处理器数目 安装caffe下载源码并设置相关文件下载caffe 源码，解压，进入caffe文件夹，将Makefile.config.example拷贝为Makefile.config123cd caffe-mastercp Makefile.config.example Makefile.configsudo gedit Makefile.config 在gedit上将以下内容修改，将以下行的注释去掉USE_CUDNN := 0OPENCV_VERSION := 3由于我使用python 3，所以将python2全部注释掉，将python3的注释去掉 而且，将 # Whatever else you find you need goes here. 下面的12INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/includeLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib 分别修改为：123INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serialLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu \/usr/lib/x86_64-linux-gnu/hdf5/serial 主要是因为ubuntu16.04文件位置 与以前版本相比，发生了变化，而系统需要hdf5的位置，因此需要修改路径.最后，打开makefile文件，做如下修改，将1NVCCFLAGS +=-ccbin=$(CXX) -Xcompiler-fPIC $(COMMON_FLAGS) 替换为：1NVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS) 编译源码最后，使用以下命令编译源码12345make all -j4make test -j4make runtest -j4make pycaffe -j4make distribute -j4 如果以上没有报错，那么恭喜你，如果出现以下错误，可以进行如此修改： not found lboost_python3解决方法，修改Makefile.config文件，将123PYTHON_LIBRARIES := boost_python3 python3.5mPYTHON_INCLUDE := /usr/include/python3.5m \ /usr/lib/python3.5/dist-packages/numpy/core/include 修改为123PYTHON_LIBRARIES := boost_python-py35 python3.5mPYTHON_INCLUDE := /usr/include/python3.5m \ /usr/lib/python3.5/dist-packages/numpy/core/include not found libopencv_core.so.3.2.0这个为ld_library的问题，解决方法为：1sudo vi /etc/ld.so.conf.d/opencv.conf 添加以下内容1/usr/local/lib /usr/local/lib为我的ibopencv_core.so.3.2.0所在的文件夹，你需要修改为你的相应文件夹]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>python3</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
</search>
